# java.util.Date implementation
scalar DateTime
# java.time.LocalDate
scalar LocalDate

enum ResultValue {
  POSITIVE
  NEGATIVE
  UNDETERMINED
}

type DeviceType {
  internalId: ID
  name: String
  manufacturer: String
  model: String
  loincCode: String
}
type Patient {
  internalId: ID
  lookupId: String
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  race: String
  birthDate: String
  gender: String
  ethnicity: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  telephone: String
  email: String
  role: String
  residentCongregateSetting: Boolean
  employedInHealthcare: Boolean
  lastTest: TestResult
  testResults: [PatientTestResult!]!
}
type Facility {
  id: ID
  name: String
  cliaNumber: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
  deviceTypes: [DeviceType]
  defaultDeviceType: DeviceType
  orderingProvider: Provider
}
type Provider {
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  NPI: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
}
type Organization {
  internalId: ID
  name: String
  testingFacility: [Facility]
}
# When starting from the patient, take a more limited view
type PatientTestResult {
  internalId: ID
  id: ID
  dateTested: DateTime
  result: ResultValue
}
# TestResult and TestOrder should have the same properties
type TestOrder {
  internalId: ID
  patient: Patient
  dateAdded: String
  pregnancy: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: String
  firstTest: Boolean
  priorTestDate: String
  priorTestType: String
  priorTestResult: String
  deviceType: DeviceType
  result: String
  dateTested: String
}
type TestResult {
  internalId: ID
  patient: Patient
  dateAdded: String
  pregnancy: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: String
  firstTest: Boolean
  priorTestDate: String
  priorTestType: String
  priorTestResult: String
  deviceType: DeviceType
  result: String
  dateTested: DateTime
}

type User {
  id: ID
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  organization: Organization
}

type Query {
  deviceType: [DeviceType]
  patients(facilityId: String): [Patient]
  patient(id: String!): Patient
  organization: Organization
  queue(facilityId: String!): [TestOrder]
  testResults(facilityId: String!): [TestResult]
  whoami: User!
}
type Mutation {
  updateFacility(
    facilityId: String!
    testingFacilityName: String!
    cliaNumber: String
    street: String
    streetTwo: String
    city: String
    county: String
    state: String
    zipCode: String!
    phone: String
    orderingProviderFirstName: String!
    orderingProviderMiddleName: String
    orderingProviderLastName: String!
    orderingProviderSuffix: String
    orderingProviderNPI: String!
    orderingProviderStreet: String
    orderingProviderStreetTwo: String
    orderingProviderCity: String
    orderingProviderCounty: String
    orderingProviderState: String
    orderingProviderZipCode: String!
    orderingProviderPhone: String
    deviceTypes: [String]!
    defaultDevice: String!
  ): String
  addFacility(
    testingFacilityName: String!
    cliaNumber: String
    street: String
    streetTwo: String
    city: String
    county: String
    state: String
    zipCode: String!
    phone: String
    orderingProviderFirstName: String!
    orderingProviderMiddleName: String
    orderingProviderLastName: String!
    orderingProviderSuffix: String
    orderingProviderNPI: String!
    orderingProviderStreet: String
    orderingProviderStreetTwo: String
    orderingProviderCity: String
    orderingProviderCounty: String
    orderingProviderState: String
    orderingProviderZipCode: String!
    orderingProviderPhone: String
    deviceTypes: [String]!
    defaultDevice: String!
  ): String
  updateOrganization(name: String!): String
  addPatient(
    facilityId: String
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String
    birthDate: String!
    street: String!
    streetTwo: String
    city: String
    state: String!
    zipCode: String!
    telephone: String!
    role: String
    email: String
    county: String
    race: String
    ethnicity: String
    gender: String
    residentCongregateSetting: Boolean!
    employedInHealthcare: Boolean!
  ): String
  updatePatient(
    facilityId: String
    patientId: String!
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String
    birthDate: String!
    street: String!
    streetTwo: String
    city: String
    state: String!
    zipCode: String!
    telephone: String!
    role: String
    email: String
    county: String
    race: String
    ethnicity: String
    gender: String
    residentCongregateSetting: Boolean!
    employedInHealthcare: Boolean!
  ): String
  addTestResult(deviceId: String!, result: String!, patientId: String!): String
  editQueueItem(id: String!, deviceId: String, result: String): TestOrder
  addPatientToQueue(
    facilityId: String!
    patientId: String!
    pregnancy: String
    symptoms: String
    firstTest: Boolean
    priorTestDate: String
    priorTestType: String
    priorTestResult: String
    symptomOnset: String
    noSymptoms: Boolean
  ): String
  removePatientFromQueue(patientId: String!): String
  clearQueue: Int
  updateTimeOfTestQuestions(
    patientId: String!
    pregnancy: String
    symptoms: String
    firstTest: Boolean
    priorTestDate: String
    priorTestType: String
    priorTestResult: String
    symptomOnset: String
    noSymptoms: Boolean
  ): String
}
