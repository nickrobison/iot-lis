// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Protocols

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Patient struct {
	_tab flatbuffers.Table
}

func GetRootAsPatient(buf []byte, offset flatbuffers.UOffsetT) *Patient {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Patient{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Patient) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Patient) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Patient) SequenceNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Patient) MutateSequenceNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Patient) PatientId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PatientStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PatientAddSequenceNumber(builder *flatbuffers.Builder, sequenceNumber int32) {
	builder.PrependInt32Slot(0, sequenceNumber, 1)
}
func PatientAddPatientId(builder *flatbuffers.Builder, patientId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(patientId), 0)
}
func PatientEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
