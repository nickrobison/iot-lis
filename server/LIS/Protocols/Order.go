// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Protocols

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Order struct {
	_tab flatbuffers.Table
}

func GetRootAsOrder(buf []byte, offset flatbuffers.UOffsetT) *Order {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Order{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Order) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Order) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Order) SequenceNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Order) MutateSequenceNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Order) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Order) TestTypeName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Order) SampleType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func OrderStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func OrderAddSequenceNumber(builder *flatbuffers.Builder, sequenceNumber int32) {
	builder.PrependInt32Slot(0, sequenceNumber, 1)
}
func OrderAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(orderId), 0)
}
func OrderAddTestTypeName(builder *flatbuffers.Builder, testTypeName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(testTypeName), 0)
}
func OrderAddSampleType(builder *flatbuffers.Builder, sampleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sampleType), 0)
}
func OrderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
