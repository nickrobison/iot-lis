// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Protocols

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Result struct {
	_tab flatbuffers.Table
}

func GetRootAsResult(buf []byte, offset flatbuffers.UOffsetT) *Result {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Result{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Result) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Result) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Result) SequenceNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *Result) MutateSequenceNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Result) AnalyteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) TestValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) TestUnits() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) ReferenceRange() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) TestFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) TestResultType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Result) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Result) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func ResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ResultAddSequenceNumber(builder *flatbuffers.Builder, sequenceNumber int32) {
	builder.PrependInt32Slot(0, sequenceNumber, 1)
}
func ResultAddAnalyteName(builder *flatbuffers.Builder, analyteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(analyteName), 0)
}
func ResultAddTestValue(builder *flatbuffers.Builder, testValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(testValue), 0)
}
func ResultAddTestUnits(builder *flatbuffers.Builder, testUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(testUnits), 0)
}
func ResultAddReferenceRange(builder *flatbuffers.Builder, referenceRange flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(referenceRange), 0)
}
func ResultAddTestFlag(builder *flatbuffers.Builder, testFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(testFlag), 0)
}
func ResultAddTestResultType(builder *flatbuffers.Builder, testResultType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(testResultType), 0)
}
func ResultAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(7, timestamp, 0)
}
func ResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
